#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>

#define BUF_SIZE 4096

void ft_putstr_fd(char *str, int fd) {
    int i = 0;
    while (str[i]) {
        write(fd, &str[i], 1);
        i++;
    }
}

void ft_putnbr_fd(int nb, int fd) {
    char c = nb % 10 + '0';
    if (nb / 10 != 0) {
        ft_putnbr_fd(nb / 10, fd);
    }
    write(fd, &c, 1);
}

int get_map_info(char *map, int *num_lines, char *vacant, char *obstacle, char *full) {
    int fd = open(map, O_RDONLY);
    if (fd < 0) {
        ft_putstr_fd("map error\n", 2);
        return -1;
    }
    char buf[BUF_SIZE + 1];
    int bytes_read = read(fd, buf, BUF_SIZE);
    buf[bytes_read] = '\0';
    int i = 0;
    int num_lines_read = 0;
    while (buf[i] && buf[i] != '\n') {
        if (i == 0) {
            *num_lines = buf[i] - '0';
        } else if (i == 1) {
            *vacant = buf[i];
        } else if (i == 2) {
            *obstacle = buf[i];
        } else if (i == 3) {
            *full = buf[i];
        }
        i++;
    }
    if (i < 4 || !*num_lines || !*vacant || !*obstacle || !*full) {
        ft_putstr_fd("map error\n", 2);
        return -1;
    }
    while (buf[i] && num_lines_read < *num_lines) {
        if (buf[i] == '\n') {
            num_lines_read++;
        } else if (buf[i] != *vacant && buf[i] != *obstacle) {
            ft_putstr_fd("map error\n", 2);
            return -1;
        }
        i++;
    }
    if (num_lines_read < *num_lines) {
        ft_putstr_fd("map error\n", 2);
        return -1;
    }
    close(fd);
    return 0;
}


int get_square_size(char *map, int num_lines, char vacant) {
    int fd = open(map, O_RDONLY);
    if (fd < 0) {
        ft_putstr_fd("map error\n", 2);
        return -1;
    }
    char buf[BUF_SIZE + 1];
    int bytes_read = read(fd, buf, BUF_SIZE);
    buf[bytes_read] = '\0';
    int i = 0;
    int line_length = 0;
    while (buf[i] && buf[i] != '\n') {
        i++;
    }
    line_length = i;
    int square_size[num_lines][line_length];
    i = 0;
    int row = 0;
    int col = 0;
    while (buf[i] && row < num_lines) {
        if (buf[i] == '\n') {
            row++;
            col = 0;
        } else if (buf[i] == vacant) {
            square_size[row][col] = 1;
        } else {
            square_size[row][col] = 0;
        }
        i++;
        col++;
    }
    for (int r = 1; r < num_lines; r++) {
        for (int c = 1; c < line_length; c++) {
            if (square_size[r][c] == 1) {
                int min_neighbour = square_size[r - 1][c - 1];
                if (square_size[r - 1][c] < min_neighbour) {
                    min_neighbour = square_size[r - 1][c];
                }
                if (square_size[r][c - 1] < min_neighbour) {
                    min_neighbour = square_size[r][c - 1];
                }
                square_size[r][c] = min_neighbour + 1;
            }
        }
    }
    int max_size = 0;
    int max_row = 0;
    int max_col = 0;
    for (int r = 0; r < num_lines; r++) {
        for (int c = 0; c < line_length; c++) {
            if (square_size[r][c] > max_size) {
                max_size = square_size[r][c];
                max_row = r;
                max_col = c;
            }
        }
    }
    close(fd);
    return max_size;
}

int main(int argc, char **argv) {
    if (argc < 2) {
        ft_putstr_fd("usage: ./bsq [map]\n", 2);
        return 1;
    }
    int num_lines;
    char vacant;
    char obstacle;
    char full;
    int result = get_map_info(argv[1], &num_lines, &vacant, &obstacle, &full);
    if (result == -1) {
        return 1;
    }
    int square_size = get_square_size(argv[1], num_lines, vacant);
    ft_putnbr_fd(square_size, 1);
    return 0;
}
